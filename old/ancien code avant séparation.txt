import numpy as np
from PIL import Image
from scipy.fft import dct, idct
import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog
import os

# Ordre Zig-Zag pour un bloc 8x8
ZIGZAG_ORDER = [
     0,  1,  5,  6, 14, 15, 27, 28,
     2,  4,  7, 13, 16, 26, 29, 42,
     3,  8, 12, 17, 25, 30, 41, 43,
     9, 11, 18, 24, 31, 40, 44, 53,
    10, 19, 23, 32, 39, 45, 52, 54,
    20, 22, 33, 38, 46, 51, 55, 60,
    21, 34, 37, 47, 50, 56, 59, 61,
    35, 36, 48, 49, 57, 58, 62, 63
]

def crea_bloc(image, block_size=8):
    """
    Divise l'image en blocs de taille block_size x block_size.
    """
    h, w = image.shape
    blocs = []
    for i in range(0, h, block_size):
        for j in range(0, w, block_size):
            bloc = image[i:i + block_size, j:j + block_size]
            # Si le bloc n'est pas complet, le compléter avec des zéros
            if bloc.shape[0] != block_size or bloc.shape[1] != block_size:
                bloc = np.pad(bloc, ((0, block_size - bloc.shape[0]), (0, block_size - bloc.shape[1])), 'constant')
            blocs.append(bloc)
    return blocs

def dct2(bloc):
    """
    Applique la Transformée en Cosinus Discrète 2D au bloc.
    """
    return dct(dct(bloc.T, norm='ortho').T, norm='ortho')

def idct2(bloc):
    """
    Applique la Transformée en Cosinus Discrète Inverse 2D au bloc.
    """
    return idct(idct(bloc.T, norm='ortho').T, norm='ortho')

def quantization(bloc, matrice_quant):
    """
    Quantifie les coefficients DCT avec la matrice de quantification.
    """
    return np.round(bloc / matrice_quant).astype(int)

def inverse_quantization(bloc, matrice_quant):
    """
    Effectue la quantification inverse des coefficients DCT.
    """
    return (bloc * matrice_quant).astype(float)

def zigzag_order(bloc):
    """
    Réorganise les coefficients du bloc en ordre zig-zag.
    """
    return [bloc.flatten()[i] for i in ZIGZAG_ORDER]

def inverse_zigzag_order(vector):
    """
    Reconstruit le bloc 8x8 à partir des coefficients en ordre zig-zag.
    """
    bloc = np.zeros(64, dtype=int)
    for i, val in enumerate(vector):
        if i < len(ZIGZAG_ORDER):
            bloc[ZIGZAG_ORDER[i]] = val
    return bloc.reshape((8, 8))

def run_length_encode(vector):
    """
    Encode les coefficients avec le codage par longueur d'exécution (RLE).
    """
    encoding = []
    zeros = 0
    for coef in vector:
        if coef == 0:
            zeros += 1
        else:
            if zeros > 0:
                encoding.append((0, zeros))
                zeros = 0
            encoding.append(coef)
    if zeros > 0:
        encoding.append((0, zeros))
    return encoding

def run_length_decode(encoded_vector):
    """
    Décode le vecteur encodé avec RLE.
    """
    decoded = []
    for item in encoded_vector:
        if isinstance(item, tuple) and item[0] == 0:
            decoded.extend([0] * item[1])
        else:
            decoded.append(item)
    # S'assurer que le vecteur a exactement 64 coefficients
    if len(decoded) < 64:
        decoded.extend([0] * (64 - len(decoded)))
    return decoded[:64]

def compresser(blocs, matrice_quant):
    """
    Compresse les blocs d'image.
    """
    data_compresse = []
    for bloc in blocs:
        bloc_dct = dct2(bloc - 128)  # Décalage de niveau
        bloc_quant = quantization(bloc_dct, matrice_quant)
        zigzag = zigzag_order(bloc_quant)
        rle = run_length_encode(zigzag)
        data_compresse.append(rle)
    return data_compresse

def decompresser(data_compresse, matrice_quant):
    """
    Décompresse les données compressées en blocs d'image.
    """
    blocs_decomp = []
    for rle in data_compresse:
        zigzag = run_length_decode(rle)
        bloc_quant = inverse_zigzag_order(zigzag)
        bloc_idct = idct2(inverse_quantization(bloc_quant, matrice_quant)) + 128  # Inversion du décalage
        bloc_idct = np.clip(bloc_idct, 0, 255).astype(np.uint8)
        blocs_decomp.append(bloc_idct)
    return blocs_decomp

def reconstruire_image(blocs, largeur, hauteur, block_size=8):
    """
    Reconstruit l'image à partir des blocs.
    """
    image = np.zeros((hauteur, largeur), dtype=np.uint8)
    index = 0
    for i in range(0, hauteur, block_size):
        for j in range(0, largeur, block_size):
            image[i:i + block_size, j:j + block_size] = blocs[index]
            index += 1
    return image

def traiter_image(chemin_entree, chemin_sortie, matrice_quant, qualite=50):
    """
    Compresse et décompresse l'image, puis enregistre l'image compressée.
    """
    # Charger l'image et la convertir en YCbCr
    img = Image.open(chemin_entree).convert("YCbCr")
    img_ycbcr = np.array(img, dtype=np.float32)
    hauteur, largeur, _ = img_ycbcr.shape

    # Séparer les canaux Y, Cb et Cr
    Y = img_ycbcr[:, :, 0]
    Cb = img_ycbcr[:, :, 1]
    Cr = img_ycbcr[:, :, 2]

    # Compresser chaque canal
    blocs_Y = crea_bloc(Y)
    blocs_Cb = crea_bloc(Cb)
    blocs_Cr = crea_bloc(Cr)

    data_compresse_Y = compresser(blocs_Y, matrice_quant)
    data_compresse_Cb = compresser(blocs_Cb, matrice_quant)
    data_compresse_Cr = compresser(blocs_Cr, matrice_quant)

    # Décompresser chaque canal
    blocs_decomp_Y = decompresser(data_compresse_Y, matrice_quant)
    blocs_decomp_Cb = decompresser(data_compresse_Cb, matrice_quant)
    blocs_decomp_Cr = decompresser(data_compresse_Cr, matrice_quant)

    # Reconstruire chaque canal
    image_restaurée_Y = reconstruire_image(blocs_decomp_Y, largeur, hauteur)
    image_restaurée_Cb = reconstruire_image(blocs_decomp_Cb, largeur, hauteur)
    image_restaurée_Cr = reconstruire_image(blocs_decomp_Cr, largeur, hauteur)

    # Empiler les canaux restaurés
    img_restaurée_ycbcr = np.stack((image_restaurée_Y, image_restaurée_Cb, image_restaurée_Cr), axis=2)

    # Convertir de YCbCr à RGB
    img_restaurée_rgb = Image.fromarray(img_restaurée_ycbcr, 'YCbCr').convert('RGB')

    # Enregistrer l'image compressée
    img_restaurée_rgb.save(chemin_sortie, "JPEG", quality=qualite)

    messagebox.showinfo("Compression réussie", f"L'image compressée a été enregistrée sous :\n{chemin_sortie}")

def principal():
    root = tk.Tk()
    root.withdraw()

    # Matrice de quantification JPEG standard pour la luminance
    MATRICE_QUANT_Y = np.array([
        [16,11,10,16,24,40,51,61],
        [12,12,14,19,26,58,60,55],
        [14,13,16,24,40,57,69,56],
        [14,17,22,29,51,87,80,62],
        [18,22,37,56,68,109,103,77],
        [24,35,55,64,81,104,113,92],
        [49,64,78,87,103,121,120,101],
        [72,92,95,98,112,100,103,99]
    ])
    
    # Pour simplifier, utiliser la même matrice pour Cb et Cr
    MATRICE_QUANT_C = MATRICE_QUANT_Y * 1.5
    MATRICE_QUANT_C = MATRICE_QUANT_C.astype(int)

    # Demander à l'utilisateur de sélectionner une image
    chemin_entree = filedialog.askopenfilename(
        title="Sélectionnez une image à compresser",
        filetypes=[("Fichiers images", "*.jpg *.jpeg *.png")]
    )
    if not chemin_entree:
        messagebox.showwarning("Avertissement", "Aucune image sélectionnée.")
        return

    # Définir le chemin de sortie
    nom_base = os.path.splitext(os.path.basename(chemin_entree))[0]
    dossier_sortie = os.path.dirname(chemin_entree)
    chemin_sortie = os.path.join(dossier_sortie, f"{nom_base}_compress.jpg")

    # Demander à l'utilisateur le facteur de qualité
    qualite = 50  # Qualité par défaut
    try:
        qualite_input = simpledialog.askstring("Qualité", "Entrez le facteur de qualité (1-100) :", initialvalue="50")
        if qualite_input:
            qualite = int(qualite_input)
            if not (1 <= qualite <= 100):
                raise ValueError
    except:
        messagebox.showwarning("Avertissement", "Facteur de qualité invalide. Utilisation de la qualité par défaut (50).")
        qualite = 50

    # Ajuster la matrice de quantification en fonction de la qualité
    if qualite < 50:
        scale = 5000 / qualite
    else:
        scale = 200 - 2 * qualite
    MATRICE_QUANT_Y_adj = np.floor((MATRICE_QUANT_Y * scale + 50) / 100).astype(int)
    MATRICE_QUANT_Y_adj[MATRICE_QUANT_Y_adj == 0] = 1
    MATRICE_QUANT_C_adj = np.floor((MATRICE_QUANT_C * scale + 50) / 100).astype(int)
    MATRICE_QUANT_C_adj[MATRICE_QUANT_C_adj == 0] = 1

    # Traiter l'image
    traiter_image_couleur(chemin_entree, chemin_sortie, MATRICE_QUANT_Y_adj, MATRICE_QUANT_C_adj, qualite)

def traiter_image_couleur(chemin_entree, chemin_sortie, matrice_quant_Y, matrice_quant_C, qualite=50):
    """
    Compresse et décompresse l'image couleur, puis enregistre l'image compressée.
    """
    # Charger l'image et la convertir en YCbCr
    img = Image.open(chemin_entree).convert("YCbCr")
    img_ycbcr = np.array(img, dtype=np.float32)
    hauteur, largeur, _ = img_ycbcr.shape

    # Séparer les canaux Y, Cb et Cr
    Y = img_ycbcr[:, :, 0]
    Cb = img_ycbcr[:, :, 1]
    Cr = img_ycbcr[:, :, 2]

    # Compresser chaque canal
    blocs_Y = crea_bloc(Y)
    blocs_Cb = crea_bloc(Cb)
    blocs_Cr = crea_bloc(Cr)

    data_compresse_Y = compresser(blocs_Y, matrice_quant_Y)
    data_compresse_Cb = compresser(blocs_Cb, matrice_quant_C)
    data_compresse_Cr = compresser(blocs_Cr, matrice_quant_C)

    # Décompresser chaque canal
    blocs_decomp_Y = decompresser(data_compresse_Y, matrice_quant_Y)
    blocs_decomp_Cb = decompresser(data_compresse_Cb, matrice_quant_C)
    blocs_decomp_Cr = decompresser(data_compresse_Cr, matrice_quant_C)

    # Reconstruire chaque canal
    image_restaurée_Y = reconstruire_image(blocs_decomp_Y, largeur, hauteur)
    image_restaurée_Cb = reconstruire_image(blocs_decomp_Cb, largeur, hauteur)
    image_restaurée_Cr = reconstruire_image(blocs_decomp_Cr, largeur, hauteur)

    # Empiler les canaux restaurés
    img_restaurée_ycbcr = np.stack((image_restaurée_Y, image_restaurée_Cb, image_restaurée_Cr), axis=2)

    # Convertir de YCbCr à RGB
    img_restaurée_rgb = Image.fromarray(img_restaurée_ycbcr, 'YCbCr').convert('RGB')

    # Enregistrer l'image compressée
    img_restaurée_rgb.save(chemin_sortie, "JPEG", quality=qualite)

    messagebox.showinfo("Compression réussie", f"L'image compressée a été enregistrée sous :\n{chemin_sortie}")

if __name__ == "__main__":
    principal()
